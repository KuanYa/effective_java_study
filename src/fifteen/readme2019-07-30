第15条:是可变性最小化

一、定义：
    不可变的类实际就是实例不能被修改的类,每个实施例中包含的所有信息都必须在创建该实例的时候就提供
并在对象的声明周期内固定不变，Java平台列库存在很多不可变类，
    例如：String BigInteger BigDecimal
    不可变类比可变类更易于设计，实现和使用。不容易出错，更加安全

    设计不可变类五个原则：

    1、不要提供任何会修改对象状态的方法

    2、保证类不会被扩展。  为了防止类被子类话，一般使这个类为final

    3、使所有的域都是final的。

    4、是所有的域成为私有的。防止客户端获得访问域被引用对象的权限，防止客户端修改这些对象

    5、确保对于任何可变组件的互斥访问。 如果类具有指向可变对象的域，则必修确保该类的客户端无法获得指向这些的对象引用，不要用客户端提供的对象引用
来初始化这样的域，也不要从任何方法中返回该对象的引用。在构造器、访问方法和readObject方法中使用保护性拷贝

二、函数做法：创建返回新的实例，而不是修改这个实例，这样模式成为函数做法。

    优点：
    1、不可变类比较简单，不可变对象可以只有一种状态，如果能够确保所有的构造器都建立了这个类的约束关系，
就可以保证这些约束条件在这个类的整个生命周期内永远不会发生改变。

    2、不可变对象本质上是线程安全的，不同不要求同步。当多个线程并发访问这样的对象时，他们不会遭到破坏，这无疑是获得线程安全最容易的办法。
所以不可变对象可以被自由共享

    3、不仅可以共享不可变对象化，甚至可以共享它们内部信息

    4、不可变对象为其他对象提供了大量的构件

    缺点：
    对于每一个不同的值都需要一个单独的对象。创建这种对象代价可能很高，特别是对于大型对象的情形
    例如：上百万位的BigInteger,想改变低位
    BigInteger moby = ...；
    moby = moby.flipBit(0);

    如果执行一个多步骤操作，每个步骤会产生新的对象，除了最后结果之外，其他对象都会被丢弃，此时性能问题就会显露
    解决办法：

    办法一、先猜测经常会用到哪些多步骤的操作，然后将他们作为基本类型提供，作为基本类型提供，不可变类就不必再每一个步骤单独创建一个对象，
不可变类的内部更加灵活
    例子：BigInteger 有一个包级私有的配套类，可以加速 模指数 这样的多步骤

    方法二、如果无法预测哪些多步骤，那么提供一个公有的可变配套类
    例子：String 它的可变配套类是 StringBuilder (StringBuffer 基本废弃)
三、将类变为final 的另一种办法，让类的所有构造器都是私有的或者包级私有的，并添加 “静态工厂” 来替代公有的构造器

    这样可以更加灵活，可以允许多个实现类，还可以通过改善静态工厂的对象缓存能力，在后续的发行版本中改进类的性能

四、建议：
    坚决不要为每个get方法编写一个相应的set方法。除非有很好的理由
    除非有令人信服的理由将域变成非final的，否则要是每个域都是final的
    构造器应该创建完全初始化的对象，并建立起约束关系，不要在构造器或者静态工厂之外提供公有的初始化方法。